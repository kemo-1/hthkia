---
import type { Feature } from '@data/features';
import Button from '@components/ui/Button.astro';
import Eyebrow from '@components/ui/Eyebrow.astro';
import { getPaddingClass, getBackgroundColor, getTextColor } from '@utils/styleUtils';
import type { PaddingSize, ThemeColor } from '@utils/styleUtils';

export interface Props {
    content: {
        eyebrow?: string;
        title?: string;
        description?: string;
        button?: {
            text: string;
            link: string;
            variant?: 'primary' | 'secondary' | 'ghostLight' | 'ghostDark';
        };
        features: Feature[];
    };
    background?: ThemeColor;
    padding?: PaddingSize;
    paddingTop?: PaddingSize;
    paddingBottom?: PaddingSize;
}

const {
    content: {
        eyebrow,
        title,
        description,
        button,
        features
    },
    background = 'base'
} = Astro.props;

const bgColor = getBackgroundColor(background);
const textColor = getTextColor(background);
const paddingClass = getPaddingClass({ 
    padding: Astro.props.padding,
    paddingTop: Astro.props.paddingTop,
    paddingBottom: Astro.props.paddingBottom 
});
---
<section class:list={["relative", "bg-[#121012]", "py-20"]}>
    <div class="site-container px-4">
      {(title || description) && (
        <div class="text-center mb-16 max-w-3xl mx-auto">
          {eyebrow && (
            <Eyebrow 
              text={eyebrow} 
              background="dark" 
            />
          )}
          {title && (
            <h2 class="text-white text-3xl font-bold" data-aos="fade-up">
              {title}
            </h2>
          )}
          {description && (
            <p class="mt-4 text-white opacity-80" data-aos="fade-up" data-aos-delay="100">
              {description}
            </p>
          )}
          {button && (
            <div class="mt-8" data-aos="fade-up" data-aos-delay="200">
              <Button
                href={button.link}
                variant={button.variant || 'primary'}
              >
                {button.text}
              </Button>
            </div>
          )}
        </div>
      )}
  
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-auto-fit gap-8 auto-rows-fr">
        {features.map((feature, index) => (
          <div 
            class="p-6 rounded-lg border border-[#FFBF08]/40 bg-[#2A2A2A] flex flex-col hover:border-[#FFBF08] transition-colors duration-300"
            data-aos="fade-up"
            data-aos-delay={index * 100}
          >
            <div class="w-12 h-12 flex items-center justify-center rounded-lg mb-4 bg-[#FFBF08]">
              <feature.icon size={24} class="text-black" />
            </div>
            <h3 class="text-xl text-white font-semibold mb-2 group-hover:text-[#FFBF08] transition-colors duration-300">
              {feature.title}
            </h3>
            <p class="text-white opacity-80">
              {feature.description}
            </p>
          </div>
        ))}
      </div>
    </div>
  </section>
  
  <style>
    .grid-cols-auto-fit {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
  </style>
  
