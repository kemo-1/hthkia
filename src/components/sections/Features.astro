---
import type { Feature } from '@data/features';
import Button from '@components/ui/Button.astro';
import Eyebrow from '@components/ui/Eyebrow.astro';
import { getPaddingClass, getBackgroundColor, getTextColor } from '@utils/styleUtils';
import type { PaddingSize, ThemeColor } from '@utils/styleUtils';

export interface Props { 
    id?: string;
    content: {
        eyebrow?: string;
       
        title?: string;
        description?: string;
        button?: {
            text: string;
            link: string;
            variant?: 'primary' | 'secondary' | 'ghostLight' | 'ghostDark';
        };
        features: Feature[];
    };
    background?: ThemeColor;
    padding?: PaddingSize;
    paddingTop?: PaddingSize;
    paddingBottom?: PaddingSize;
}

const {id,
    content: {
        eyebrow,
        title,
        description,
        button,
        features, 
    },
    background = 'base'
} = Astro.props;

const bgColor = getBackgroundColor(background);
const textColor = getTextColor(background);
const paddingClass = getPaddingClass({ 
    padding: Astro.props.padding,
    paddingTop: Astro.props.paddingTop,
    paddingBottom: Astro.props.paddingBottom 
});
---
<section id={id} class:list={["relative", "py-20"]} style="background-color: var(--color-background-light);">
  <div class="site-container px-4">
    {(title || description) && (
      <div class="text-center mb-16 max-w-3xl mx-auto">
        {eyebrow && (
          <Eyebrow 
            text={eyebrow} 
            background="dark" 
          />
        )}
        {title && (
          <h2 class="text-3xl font-bold" style="color: var(--color-headline);" data-aos="fade-up">
            {title}
          </h2>
        )}
        {description && (
          <p class="mt-4" style="color: var(--color-body-base);" data-aos="fade-up" data-aos-delay="100">
            {description}
          </p>
        )}
        {button && (
          <div class="mt-8" data-aos="fade-up" data-aos-delay="200">
            <Button
              href={button.link}
              variant={button.variant || 'primary'}
            >
              {button.text}
            </Button>
          </div>
        )}
      </div>
    )}

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-auto-fit gap-8 auto-rows-fr">
      {features.map((feature, index) => (
        <div 
          class="p-6 rounded-2xl flex flex-col shadow-md hover:shadow-xl transition-shadow duration-300 relative group overflow-hidden"
          style="
            background-color: var(--color-background);
            border: 1px solid var(--color-secondary-light);
            color: var(--color-body-dark);
          "
          data-aos="fade-up"
          data-aos-delay={index * 100}
        >
          {/* Shine effect */}
          <span 
            class="absolute inset-0 -mt-12 w-1/2 translate-x-[250%] rotate-12 opacity-10 group-hover:translate-x-[-250%] transition-transform duration-1000 ease-out z-0 pointer-events-none"
            style="background-color: var(--color-primary-light);"
          ></span>

          <div class="w-12 h-12 flex items-center justify-center rounded-xl mb-4 z-10 relative" style="background-color: var(--color-secondary);">
            <feature.icon size={24} class="text-[--color-background]" />
          </div>
          <h3 
            class="text-xl font-semibold mb-2 relative z-10 transition-colors duration-300 group-hover:text-[--color-primary]"
            style="color: var(--color-headline);"
          >
            {feature.title}
          </h3>
          <p class="relative z-10" style="color: var(--color-body-light); opacity: 0.85;">
            {feature.description}
          </p>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  .grid-cols-auto-fit {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }
</style>


