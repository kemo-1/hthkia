---
import { headerMenu } from '@data/menu';
import Logo from '@components/Logo.astro';
import { Menu, X, ChevronDown } from 'lucide-astro';
import Button from '@components/ui/Button.astro';

const ctaButton = {
    name: 'تواصل معنا',
    link: '/#contact',
};
 
// Get the current path to determine active menu item
const currentPath = Astro.url.pathname;

// Function to check if a link is the current page or a parent of the current page
const isCurrentPage = (link: string) => {
    if (link === '/') {
        return currentPath === '/';
    }
    return currentPath.startsWith(link);
};
---
<header class="fixed top-0 z-50 w-full left-0">
  <div class="site-container mx-auto px-4 mt-4">
    <div
      class="flex justify-between items-center py-4 rounded-lg px-4 border shadow-md"
      style="background-color: var(--color-background); border-color: var(--color-secondary-light)"
    >

      <Logo Height="50px" Width="50px" />

      <nav class="relative flex items-center gap-2 lg:gap-8" aria-label="Site Navigation">
        {/* Desktop Menu */}
        <ul class="hidden lg:flex lg:gap-4 items-center">
          {headerMenu.map((item, index) => (
            <li class="relative group">
              <div class="flex items-center gap-1">
                <Button
                  href={item.link}
                  variant="secondary"
                  size="lg"
                  class={`rounded-md px-2 py-1 ${
                    isCurrentPage(item.link)
                      ? 'font-semibold text-[--color-headline]'
                      : 'text-[--color-body-base] hover:text-[--color-headline]'
                  }`}
                  aria-current={isCurrentPage(item.link) ? 'page' : undefined}
                >
                  {item.name}
                  {item.children && item.showArrow && (
                    <ChevronDown size={16} class="ml-1 transform transition-transform inline-block" />
                  )}
                </Button>
              </div>

              {/* Dropdown */}
              {item.children && (
                <ul
                  class:list={[
                    'submenu absolute mt-2 rounded-md min-w-[200px] shadow-lg opacity-0 group-hover:opacity-100 group-hover:visible invisible transition-opacity duration-200 z-50 border',
                    index === headerMenu.length - 1 ? 'right-0' : 'left-0',
                  ]}
                  style="background-color: var(--color-background-light); border-color: var(--color-secondary-light)"
                >
                  {item.children.map((child) => (
                    <li>
                      <Button
                        href={child.link}
                        variant="secondary"
                        size="lg"
                        class={`w-full text-left block px-4 py-2 text-sm rounded-md ${
                          isCurrentPage(child.link)
                            ? 'font-semibold text-[--color-headline]'
                            : 'text-[--color-body-base] hover:text-[--color-headline]'
                        }`}
                        aria-current={isCurrentPage(child.link) ? 'page' : undefined}
                      >
                        {child.name}
                      </Button>
                    </li>
                  ))}
                </ul>
              )}
            </li>
          ))}
        </ul>

        {/* CTA Button */}
        <Button href={ctaButton.link} size='lg' variant="primary">
          {ctaButton.name}
        </Button>

        {/* Mobile Menu Toggle */}
        <button
          class="mobile-menu-button relative z-30 p-2 border-none cursor-pointer lg:hidden"
          aria-label="Toggle Menu"
          aria-expanded="false"
          style="background-color: var(--color-background)"
        >
          <span class="menu-icon block">
            <Menu size={24} class="text-[--color-body-base]" />
          </span>
          <span class="close-icon hidden">
            <X size={24} class="text-[--color-body-base]" />
          </span>
        </button>

        {/* Mobile Menu */}
        <div
        class="mobile-menu fixed inset-0 z-20 px-8 pt-20 hidden opacity-0 scale-95 transform transition-all duration-200 ease-out overflow-y-auto flex flex-col items-center text-center"
        style="background-color: var(--color-primary-dark); color: var(--color-body-base)"
      >
        <ul class="flex flex-col gap-6 w-full max-w-md">
          {headerMenu.map((item) => (
            <li key={item.name}>
              <div class="flex flex-col items-center">
                <div class="flex items-center justify-between w-full">
                  <Button
                    href={item.link}
                    variant="primary"
                    size="lg"
                    class={`w-full py-3 rounded-lg text-base ${
                      isCurrentPage(item.link)
                        ? 'text-[--color-headline] font-semibold'
                        : 'text-[--color-body-base] hover:text-[--color-headline]'
                    }`}
                    aria-current={isCurrentPage(item.link) ? 'page' : undefined}
                  >
                    {item.name}
                  </Button>
      
                  {item.children && (
                    <button
                      class="mobile-submenu-button ml-2 p-2 rounded-full focus:outline-none focus:ring-2 focus:ring-[--color-headline]"
                      aria-label={`Toggle ${item.name} submenu`}
                      aria-expanded="false"
                    >
                      <ChevronDown size={20} class="transform transition-transform duration-200" />
                    </button>
                  )}
                </div>
      
                {item.children && (
                  <ul class="mobile-submenu mt-3 space-y-2 w-full hidden">
                    {item.children.map((child) => (
                      <li key={child.name}>
                        <Button
                          href={child.link}
                          variant="secondary"
                          size="sm"
                          class={`block w-full py-2 px-4 rounded-md text-sm text-left ${
                            isCurrentPage(child.link)
                              ? 'text-[--color-headline] font-semibold'
                              : 'text-[--color-body-base] hover:text-[--color-headline]'
                          }`}
                          aria-current={isCurrentPage(child.link) ? 'page' : undefined}
                        >
                          {child.name}
                        </Button>
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </li>
          ))}
        </ul>
      
        {/* Mobile CTA */}
        <div class="mt-12 pb-10 w-full flex justify-center">
          <Button href={ctaButton.link} variant="secondary" size="lg" class="px-6 py-3 rounded-full text-base">
            {ctaButton.name}
          </Button>
        </div>
      </div>
      
      </nav>
    </div>
  </div>
</header>

<script>
    // Desktop Menu
    const desktopMenuItems = document.querySelectorAll('.group');

    desktopMenuItems.forEach((item) => {
        const link = item.querySelector('a');
        const button = item.querySelector('button');
        const submenu = item.querySelector('.submenu');
        const submenuLinks = submenu?.querySelectorAll('a');

        if (submenu && link && button) {
            // Handle hover
            item.addEventListener('mouseenter', () => {
                showSubmenu(submenu as HTMLElement, button as HTMLElement);
            });

            item.addEventListener('mouseleave', () => {
                hideSubmenu(submenu as HTMLElement, button as HTMLElement);
            });

            // Handle keyboard navigation
            link.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowDown' && item.children) {
                    e.preventDefault();
                    showSubmenu(submenu as HTMLElement, button as HTMLElement);
                    submenuLinks?.[0]?.focus();
                }
            });

            button.addEventListener('click', (e) => {
                if (item.children) {
                    e.preventDefault();
                    const isExpanded = button.getAttribute('aria-expanded') === 'true';
                    if (isExpanded) {
                        hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                    } else {
                        showSubmenu(submenu as HTMLElement, button as HTMLElement);
                        submenuLinks?.[0]?.focus();
                    }
                }
            });

            button.addEventListener('keydown', (e) => {
                if (e.key === 'ArrowDown' && item.children) {
                    e.preventDefault();
                    showSubmenu(submenu as HTMLElement, button as HTMLElement);
                    submenuLinks?.[0]?.focus();
                }
            });

            // Don't show submenu on focus, only on hover or arrow key
            link.addEventListener('focus', () => {
                hideSubmenu(submenu as HTMLElement, button as HTMLElement);
            });

            // Keyboard navigation within submenu
            submenuLinks?.forEach((submenuLink, index) => {
                submenuLink.addEventListener('keydown', (e) => {
                    const lastIndex = submenuLinks.length - 1;

                    switch (e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            if (index < lastIndex) {
                                submenuLinks[index + 1].focus();
                            }
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            if (index > 0) {
                                submenuLinks[index - 1].focus();
                            } else {
                                link.focus();
                                hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                            }
                            break;
                        case 'Escape':
                            e.preventDefault();
                            hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                            link.focus();
                            break;
                        case 'Tab':
                            // Allow normal tab behavior but close submenu
                            hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                            break;
                    }
                });
            });

            // Close submenu when focus leaves
            document.addEventListener('focusin', (e) => {
                if (item && !item.contains(e.target as Node)) {
                    hideSubmenu(submenu as HTMLElement, button as HTMLElement);
                }
            });
        }
    });

    // Helper functions
    function showSubmenu(submenu: HTMLElement, button: HTMLElement) {
        submenu.classList.remove('invisible', 'opacity-0');
        submenu.classList.add('visible', 'opacity-100');
        button.setAttribute('aria-expanded', 'true');
    }

    function hideSubmenu(submenu: HTMLElement, button: HTMLElement) {
        submenu.classList.add('invisible', 'opacity-0');
        submenu.classList.remove('visible', 'opacity-100');
        button.setAttribute('aria-expanded', 'false');
    }

    // Simple mobile submenu toggle
    document.querySelectorAll('.mobile-submenu-button').forEach((button) => {
        button.addEventListener('click', () => {
            const submenu = button.parentElement?.nextElementSibling as HTMLElement;
            const chevron = button.querySelector('svg');

            // Toggle submenu
            if (submenu) {
                submenu.classList.toggle('hidden');
                chevron?.classList.toggle('rotate-180');
                const isExpanded = submenu.classList.contains('hidden') ? 'false' : 'true';
                button.setAttribute('aria-expanded', isExpanded);
            }
        });
    });

    // Mobile menu toggle with scroll lock
    const mobileMenuButton = document.querySelector('.mobile-menu-button');
    const mobileMenu = document.querySelector('.mobile-menu');
    const menuIcon = document.querySelector('.menu-icon');
    const closeIcon = document.querySelector('.close-icon');

    mobileMenuButton?.addEventListener('click', () => {
        const isHidden = mobileMenu?.classList.contains('hidden');

        if (isHidden) {
            document.body.style.overflow = 'hidden';
            mobileMenu?.classList.remove('hidden');
            requestAnimationFrame(() => {
                mobileMenu?.classList.remove('opacity-0', 'scale-95');
                mobileMenu?.classList.add('opacity-100', 'scale-100');
            });
            menuIcon?.classList.add('hidden');
            closeIcon?.classList.remove('hidden');
        } else {
            document.body.style.overflow = '';
            mobileMenu?.classList.add('opacity-0', 'scale-95');
            mobileMenu?.classList.remove('opacity-100', 'scale-100');
            setTimeout(() => {
                mobileMenu?.classList.add('hidden');
            }, 200);
            menuIcon?.classList.remove('hidden');
            closeIcon?.classList.add('hidden');
        }
    });
</script>
